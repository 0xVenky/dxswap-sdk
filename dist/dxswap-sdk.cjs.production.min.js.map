{"version":3,"file":"dxswap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/utils.ts","../src/entities/token.ts","../src/fees.ts","../src/errors.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport { proxies as kovanProxies } from 'dxswap-core/.openzeppelin/kovan.json'\nimport MULTICALL_ABI from './abis/Multicall.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000000001',\n  [ChainId.ROPSTEN]: '0x0000000000000000000000000000000000000003',\n  [ChainId.RINKEBY]: '0x0000000000000000000000000000000000000004',\n  [ChainId.GÖRLI]: '0x0000000000000000000000000000000000000005',\n  [ChainId.KOVAN]: kovanProxies['dxswap-core/DXswapFactory'][0].address\n}\n\nexport const INIT_CODE_HASH = '0x25dd05d38222d917e4487e1da5be545f4c08adc197eb59f87c597a13cf7791d2'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _30\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst MULTICALL_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xeefBa1e63905eF1D7ACbA5a8513c70307C1cE441',\n  [ChainId.ROPSTEN]: '0x53C43764255c17BD724F74c4eF150724AC50a3ed',\n  [ChainId.KOVAN]: '0x2cc8688C5f75E365aaEEb4ea8D6a480405A48D2A',\n  [ChainId.RINKEBY]: '0x42Ad527de7d4e9d9d011aC45B31D8551f8Fe9821',\n  [ChainId.GÖRLI]: '0x77dCa2C955b15e9dE4dbBCf1246B4B85b651e50e'\n}\n\nexport { MULTICALL_ABI, MULTICALL_ADDRESS }\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId, SolidityType } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\n\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\nexport class Token {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.decimals = decimals\n    if (typeof symbol === 'string') this.symbol = symbol\n    if (typeof name === 'string') this.name = name\n  }\n\n  equals(other: Token): boolean {\n    const equal = this.chainId === other.chainId && this.address === other.address\n    if (equal) {\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equal\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const DXD = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xa1d65E8fB6e87b60FECCBc582F7f97804B725521',\n    18,\n    'DXD',\n    'DXDao'\n  ),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xDd25BaE0659fC06a8d00CD06C7f5A98D71bfB715', 18, 'DXD', 'DXDao')\n}\n\nexport const TEST_TOKENS = {\n  WEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x2823589Ae095D99bD64dEeA80B4690313e2fB519', 18, 'WEENUS', 'Weenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xaFF4481D10270F50f203E0763e2597776068CBc5', 18, 'WEENUS', 'Weenus')\n  },\n  XEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xeEf5E2d8255E973d587217f9509B416b41CA5870', 18, 'XEENUS', 'Xeenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x022E292b44B5a146F2e8ee36Ff44D3dd863C915c', 18, 'XEENUS', 'Xeenus')\n  },\n  YEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x187E63F9eBA692A0ac98d3edE6fEb870AF0079e1', 8, 'YEENUS', 'Yeenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xc6fDe3FD2Cc2b173aEC24cc3f267cb3Cd78a26B7', 8, 'YEENUS', 'Yeenus')\n  },\n}\n  \n","import JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport IDXswapPair from 'dxswap-core/build/contracts/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/contracts/IDXswapFactory.json'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  MULTICALL_ADDRESS,\n  MULTICALL_ABI,\n  ChainId\n} from './constants'\nimport { Token } from './entities/token'\n\nexport class Fees {\n\n  static async fetchSwapFee(\n    tokenPair: Token,\n    provider = getDefaultProvider(getNetwork(tokenPair.chainId)),\n  ) : Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(tokenPair.address, IDXswapPair.abi, provider).swapFee()),\n      owner: await new Contract(\n        FACTORY_ADDRESS[tokenPair.chainId],\n        IDXswapFactory.abi,\n        provider\n      ).feeToSetter()\n    }\n  }\n  \n  static async fetchSwapFees(\n    tokenPairs: Token[],\n    provider = getDefaultProvider(getNetwork(tokenPairs[0].chainId)),\n  ) : Promise<{\n    fee: BigintIsh\n    owner: string\n  }[]> {\n    const multicall = new Contract(MULTICALL_ADDRESS[tokenPairs[0].chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[tokenPairs[0].chainId], IDXswapFactory.abi, provider);\n    const tokenPairContract = new Contract(tokenPairs[0].address, IDXswapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < tokenPairs.length; tokenPairsIndex++) {\n      calls.push({\n        address: tokenPairs[tokenPairsIndex].address,\n        callData: tokenPairContract.interface.encodeFunctionData(tokenPairContract.interface.getFunction('swapFee()'))\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0];\n    let fees = [];\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(tokenPairContract.interface.decodeFunctionResult(\n          tokenPairContract.interface.getFunction('swapFee()'),\n          result.returnData[resultIndex]\n        )[0]),\n        owner\n      })\n    }\n    return fees\n  }\n  \n  static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string] : {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ) : Promise<{\n    [key: string] : {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(MULTICALL_ADDRESS[chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDXswapFactory.abi, provider);\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string] : {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n    \n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache);\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n        allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n          fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n          owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n        }\n    }\n    \n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('allPairs(uint)'), [pairIndex])\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DXS', 'DXswap'))\n    }\n    \n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = await this.fetchSwapFees(tokenPairsToFetch, provider);\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n  \n  static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId)),\n  ) : Promise<{\n    feeDenominator: BigintIsh,\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(\n      FACTORY_ADDRESS[chainId],\n      IDXswapFactory.abi,\n      provider\n    );\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\n    this.token = token\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.token.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport IDXswapPair from 'dxswap-core/build/contracts/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/contracts/IDXswapFactory.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\n\nlet CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n\n\n  static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    if (CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      CACHE = {\n        ...CACHE,\n        [tokens[0].address]: {\n          ...CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[tokenA.chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IDXswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDXswapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(await new Contract(\n      FACTORY_ADDRESS[tokenAmountA.token.chainId],\n      IDXswapFactory.abi,\n      provider\n    ).protocolFeeDenominator())\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    this.swapFee = swapFee ? swapFee : defaultSwapFee\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  reserveOf(token: Token): TokenAmount {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(inputAmount.token.equals(this.token0) || inputAmount.token.equals(this.token1), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(\n      inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.swapFee, this.protocolFeeDenominator)]\n  }\n\n  getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(outputAmount.token.equals(this.token0) || outputAmount.token.equals(this.token1), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw), JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.swapFee, this.protocolFeeDenominator)]\n  }\n\n  getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast as any)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Token } from '../token'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { TokenAmount } from './tokenAmount'\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token // input i.e. denominator\n  public readonly quoteToken: Token // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseToken: Token, quoteToken: Token, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseToken = baseToken\n    this.quoteToken = quoteToken\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseToken.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteToken.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteToken, this.baseToken, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(this.quoteToken.equals(other.baseToken), 'BASE')\n    const fraction = super.multiply(other)\n    return new Price(this.baseToken, other.quoteToken, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(tokenAmount: TokenAmount): TokenAmount {\n    invariant(tokenAmount.token.equals(this.baseToken), 'TOKEN')\n    return new TokenAmount(this.quoteToken, super.multiply(tokenAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Token) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.map(pair => pair.token0.chainId === pairs[0].token0.chainId).every(x => x),\n      'CHAIN_IDS'\n    )\n    const path = [input]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n    invariant(path.length === new Set(path).size, 'PATH')\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n  }\n\n  get input(): Token {\n    return this.path[0]\n  }\n\n  get output(): Token {\n    return this.path[this.path.length - 1]\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Token } from 'entities/token'\nimport invariant from 'tiny-invariant'\n\nimport { ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Fraction, TokenAmount } from './fractions'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\nfunction getSlippage(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: TokenAmount\n  readonly outputAmount: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.token.equals(b.inputAmount.token), 'INPUT_TOKEN')\n  invariant(a.outputAmount.token.equals(b.outputAmount.token), 'OUTPUT_TOKEN')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.slippage.lessThan(b.slippage)) {\n    return -1\n  } else if (a.slippage.greaterThan(b.slippage)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\nexport class Trade {\n  public readonly route: Route\n  public readonly tradeType: TradeType\n  public readonly inputAmount: TokenAmount\n  public readonly outputAmount: TokenAmount\n  public readonly executionPrice: Price\n  public readonly nextMidPrice: Price\n  public readonly slippage: Percent\n\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\n    invariant(amount.token.equals(tradeType === TradeType.EXACT_INPUT ? route.input : route.output), 'TOKEN')\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      amounts[0] = amount\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      amounts[amounts.length - 1] = amount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    const inputAmount = amounts[0]\n    const outputAmount = amounts[amounts.length - 1]\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.executionPrice = new Price(route.input, route.output, inputAmount.raw, outputAmount.raw)\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.slippage = getSlippage(route.midPrice, inputAmount, outputAmount)\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      return new TokenAmount(\n        this.outputAmount.token,\n        new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.raw).quotient\n      )\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      return new TokenAmount(\n        this.inputAmount.token,\n        new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      )\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    amountIn: TokenAmount,\n    tokenOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: TokenAmount = amountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === amountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut!.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.token),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut!,\n          tokenOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    tokenIn: Token,\n    amountOut: TokenAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: TokenAmount = amountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === amountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn!.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(new Route([pair, ...currentPairs], tokenIn), originalAmountOut, TradeType.EXACT_OUTPUT),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          tokenIn,\n          amountIn!,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","kovanProxies","address","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_30","_100","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SOLIDITY_TYPE_MAXIMA","uint8","uint256","MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CACHE","Token","chainId","decimals","symbol","name","this","fetchData","provider","parsedDecimals","getDefaultProvider","getNetwork","_CACHE2","_CACHE2$chainId","Contract","ERC20","then","_CACHE3","equals","other","equal","sortsBefore","toLowerCase","WETH","DXD","TEST_TOKENS","WEENUS","XEENUS","YEENUS","Fees","fetchSwapFee","tokenPair","IDXswapPair","abi","swapFee","IDXswapFactory","feeToSetter","fee","owner","fetchSwapFees","tokenPairs","multicall","MULTICALL_ABI","factoryContract","tokenPairContract","calls","callData","encodeFunctionData","getFunction","tokenPairsIndex","aggregate","map","call","result","decodeFunctionResult","returnData","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","Object","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","tokenPairAddress","_this2","swapFeesFetched","tokenPairsToFetchIndex","fetchProtocolFee","protocolFeeDenominator","feeDenominator","feeTo","feeReceiver","CAN_SET_PROTOTYPE","InsufficientReservesError","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","TokenAmount","token","amount","parsedAmount","exponentiate","raw","toExact","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","getReserves","reserves0","reserves1","balances","reserveOf","token0","token1","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","baseToken","quoteToken","scalar","fromRoute","route","prices","pairs","entries","pair","path","slice","reduce","accumulator","currentValue","fraction","quote","tokenAmount","_Fraction","adjusted","Route","input","every","currentInput","output","Set","size","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","slippage","Trade","tradeType","EXACT_INPUT","amounts","Array","nextPairs","i","nextPair","executionPrice","nextMidPrice","exactQuote","getSlippage","minimumAmountOut","slippageTolerance","EXACT_OUTPUT","maximumAmountIn","bestTradeExactIn","amountIn","tokenOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","amountOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","tokenIn","originalAmountOut","isInsufficientReservesError"],"mappings":"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"}