{"version":3,"file":"dxswap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/fees.ts","../src/errors.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport { proxies as kovanProxies } from 'dxswap-core/.openzeppelin/kovan.json'\nimport MULTICALL_ABI from './abis/Multicall.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000000001',\n  [ChainId.ROPSTEN]: '0x0000000000000000000000000000000000000003',\n  [ChainId.RINKEBY]: '0x0000000000000000000000000000000000000004',\n  [ChainId.GÖRLI]: '0x0000000000000000000000000000000000000005',\n  [ChainId.KOVAN]: kovanProxies['dxswap-core/DXswapFactory'][0].address\n}\n\nexport const INIT_CODE_HASH = '0x25dd05d38222d917e4487e1da5be545f4c08adc197eb59f87c597a13cf7791d2'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _30\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst MULTICALL_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xeefBa1e63905eF1D7ACbA5a8513c70307C1cE441',\n  [ChainId.ROPSTEN]: '0x53C43764255c17BD724F74c4eF150724AC50a3ed',\n  [ChainId.KOVAN]: '0x2cc8688C5f75E365aaEEb4ea8D6a480405A48D2A',\n  [ChainId.RINKEBY]: '0x42Ad527de7d4e9d9d011aC45B31D8551f8Fe9821',\n  [ChainId.GÖRLI]: '0x77dCa2C955b15e9dE4dbBCf1246B4B85b651e50e'\n}\n\nexport { MULTICALL_ABI, MULTICALL_ADDRESS }\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH: {[key:number]: Token} = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const DXD: {[key:number]: Token} = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xa1d65E8fB6e87b60FECCBc582F7f97804B725521',\n    18,\n    'DXD',\n    'DXDao'\n  ),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xDd25BaE0659fC06a8d00CD06C7f5A98D71bfB715', 18, 'DXD', 'DXDao')\n}\n\nexport const TEST_TOKENS: {[key:string]: {[key:number]: Token}} = {\n  WEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x2823589Ae095D99bD64dEeA80B4690313e2fB519', 18, 'WEENUS', 'Weenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xaFF4481D10270F50f203E0763e2597776068CBc5', 18, 'WEENUS', 'Weenus')\n  },\n  XEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xeEf5E2d8255E973d587217f9509B416b41CA5870', 18, 'XEENUS', 'Xeenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x022E292b44B5a146F2e8ee36Ff44D3dd863C915c', 18, 'XEENUS', 'Xeenus')\n  },\n  YEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x187E63F9eBA692A0ac98d3edE6fEb870AF0079e1', 8, 'YEENUS', 'Yeenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xc6fDe3FD2Cc2b173aEC24cc3f267cb3Cd78a26B7', 8, 'YEENUS', 'Yeenus')\n  },\n}\n  \n","import JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport IDXswapPair from 'dxswap-core/build/contracts/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/contracts/IDXswapFactory.json'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  MULTICALL_ADDRESS,\n  MULTICALL_ABI,\n  ChainId\n} from './constants'\nimport { Token } from './entities/token'\n\nexport class Fees {\n\n  static async fetchSwapFee(\n    tokenPair: Token,\n    provider = getDefaultProvider(getNetwork(tokenPair.chainId)),\n  ) : Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(tokenPair.address, IDXswapPair.abi, provider).swapFee()),\n      owner: await new Contract(\n        FACTORY_ADDRESS[tokenPair.chainId],\n        IDXswapFactory.abi,\n        provider\n      ).feeToSetter()\n    }\n  }\n  \n  static async fetchSwapFees(\n    tokenPairs: Token[],\n    provider = getDefaultProvider(getNetwork(tokenPairs[0].chainId)),\n  ) : Promise<{\n    fee: BigintIsh\n    owner: string\n  }[]> {\n    const multicall = new Contract(MULTICALL_ADDRESS[tokenPairs[0].chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[tokenPairs[0].chainId], IDXswapFactory.abi, provider);\n    const tokenPairContract = new Contract(tokenPairs[0].address, IDXswapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < tokenPairs.length; tokenPairsIndex++) {\n      calls.push({\n        address: tokenPairs[tokenPairsIndex].address,\n        callData: tokenPairContract.interface.encodeFunctionData(tokenPairContract.interface.getFunction('swapFee()'))\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0];\n    let fees = [];\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(tokenPairContract.interface.decodeFunctionResult(\n          tokenPairContract.interface.getFunction('swapFee()'),\n          result.returnData[resultIndex]\n        )[0]),\n        owner\n      })\n    }\n    return fees\n  }\n  \n  static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string] : {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ) : Promise<{\n    [key: string] : {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(MULTICALL_ADDRESS[chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDXswapFactory.abi, provider);\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string] : {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n    \n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache);\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n        allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n          fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n          owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n        }\n    }\n    \n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('allPairs(uint)'), [pairIndex])\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DXS', 'DXswap'))\n    }\n    \n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = await this.fetchSwapFees(tokenPairsToFetch, provider);\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n  \n  static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId)),\n  ) : Promise<{\n    feeDenominator: BigintIsh,\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(\n      FACTORY_ADDRESS[chainId],\n      IDXswapFactory.abi,\n      provider\n    );\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport IDXswapPair from 'dxswap-core/build/contracts/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/contracts/IDXswapFactory.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { ChainId } from '../constants'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[tokenA.chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IDXswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDXswapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(await new Contract(\n      FACTORY_ADDRESS[tokenAmountA.token.chainId],\n      IDXswapFactory.abi,\n      provider\n    ).protocolFeeDenominator())\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    this.swapFee = swapFee ? swapFee : defaultSwapFee\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(\n      inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.swapFee, this.protocolFeeDenominator)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw), JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.swapFee, this.protocolFeeDenominator)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IDXswapPair from 'dxswap-core/build/contracts/IDXswapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IDXswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","kovanProxies","address","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_30","_100","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SOLIDITY_TYPE_MAXIMA","uint8","uint256","MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","name","ETHER","Token","chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","DXD","TEST_TOKENS","WEENUS","XEENUS","YEENUS","Fees","fetchSwapFee","tokenPair","provider","getDefaultProvider","getNetwork","Contract","IDXswapPair","abi","swapFee","IDXswapFactory","feeToSetter","fee","owner","fetchSwapFees","tokenPairs","multicall","MULTICALL_ABI","factoryContract","tokenPairContract","calls","callData","encodeFunctionData","getFunction","tokenPairsIndex","aggregate","map","call","result","decodeFunctionResult","returnData","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","Object","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","tokenPairAddress","_this2","swapFeesFetched","tokenPairsToFetchIndex","fetchProtocolFee","protocolFeeDenominator","feeDenominator","feeTo","feeReceiver","CAN_SET_PROTOTYPE","InsufficientReservesError","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","fetchData","getReserves","reserves0","reserves1","balances","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","parsedDecimals","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData"],"mappings":"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"}