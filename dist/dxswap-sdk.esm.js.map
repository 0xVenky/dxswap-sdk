{"version":3,"file":"dxswap-sdk.esm.js","sources":["../src/constants.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/fees.ts","../src/errors.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport { proxies as kovanProxies } from 'dxswap-core/.openzeppelin/kovan.json'\nimport MULTICALL_ABI from './abis/Multicall.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000000001',\n  [ChainId.ROPSTEN]: '0x0000000000000000000000000000000000000003',\n  [ChainId.RINKEBY]: '0x0000000000000000000000000000000000000004',\n  [ChainId.GÖRLI]: '0x0000000000000000000000000000000000000005',\n  [ChainId.KOVAN]: kovanProxies['dxswap-core/DXswapFactory'][0].address\n}\n\nexport const INIT_CODE_HASH = '0x25dd05d38222d917e4487e1da5be545f4c08adc197eb59f87c597a13cf7791d2'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _30\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst MULTICALL_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xeefBa1e63905eF1D7ACbA5a8513c70307C1cE441',\n  [ChainId.ROPSTEN]: '0x53C43764255c17BD724F74c4eF150724AC50a3ed',\n  [ChainId.KOVAN]: '0x2cc8688C5f75E365aaEEb4ea8D6a480405A48D2A',\n  [ChainId.RINKEBY]: '0x42Ad527de7d4e9d9d011aC45B31D8551f8Fe9821',\n  [ChainId.GÖRLI]: '0x77dCa2C955b15e9dE4dbBCf1246B4B85b651e50e'\n}\n\nexport { MULTICALL_ABI, MULTICALL_ADDRESS }\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH: {[key:number]: Token} = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const DXD: {[key:number]: Token} = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xa1d65E8fB6e87b60FECCBc582F7f97804B725521',\n    18,\n    'DXD',\n    'DXDao'\n  ),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xDd25BaE0659fC06a8d00CD06C7f5A98D71bfB715', 18, 'DXD', 'DXDao')\n}\n\nexport const TEST_TOKENS: {[key:string]: {[key:number]: Token}} = {\n  WEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x2823589Ae095D99bD64dEeA80B4690313e2fB519', 18, 'WEENUS', 'Weenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xaFF4481D10270F50f203E0763e2597776068CBc5', 18, 'WEENUS', 'Weenus')\n  },\n  XEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xeEf5E2d8255E973d587217f9509B416b41CA5870', 18, 'XEENUS', 'Xeenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x022E292b44B5a146F2e8ee36Ff44D3dd863C915c', 18, 'XEENUS', 'Xeenus')\n  },\n  YEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x187E63F9eBA692A0ac98d3edE6fEb870AF0079e1', 8, 'YEENUS', 'Yeenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xc6fDe3FD2Cc2b173aEC24cc3f267cb3Cd78a26B7', 8, 'YEENUS', 'Yeenus')\n  },\n}\n  \n","import JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport IDXswapPair from 'dxswap-core/build/contracts/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/contracts/IDXswapFactory.json'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  MULTICALL_ADDRESS,\n  MULTICALL_ABI,\n  ChainId\n} from './constants'\nimport { Token } from './entities/token'\n\nexport class Fees {\n\n  static async fetchSwapFee(\n    tokenPair: Token,\n    provider = getDefaultProvider(getNetwork(tokenPair.chainId)),\n  ) : Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(tokenPair.address, IDXswapPair.abi, provider).swapFee()),\n      owner: await new Contract(\n        FACTORY_ADDRESS[tokenPair.chainId],\n        IDXswapFactory.abi,\n        provider\n      ).feeToSetter()\n    }\n  }\n  \n  static async fetchSwapFees(\n    tokenPairs: Token[],\n    provider = getDefaultProvider(getNetwork(tokenPairs[0].chainId)),\n  ) : Promise<{\n    fee: BigintIsh\n    owner: string\n  }[]> {\n    const multicall = new Contract(MULTICALL_ADDRESS[tokenPairs[0].chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[tokenPairs[0].chainId], IDXswapFactory.abi, provider);\n    const tokenPairContract = new Contract(tokenPairs[0].address, IDXswapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < tokenPairs.length; tokenPairsIndex++) {\n      calls.push({\n        address: tokenPairs[tokenPairsIndex].address,\n        callData: tokenPairContract.interface.encodeFunctionData(tokenPairContract.interface.getFunction('swapFee()'))\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0];\n    let fees = [];\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(tokenPairContract.interface.decodeFunctionResult(\n          tokenPairContract.interface.getFunction('swapFee()'),\n          result.returnData[resultIndex]\n        )[0]),\n        owner\n      })\n    }\n    return fees\n  }\n  \n  static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string] : {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ) : Promise<{\n    [key: string] : {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(MULTICALL_ADDRESS[chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDXswapFactory.abi, provider);\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string] : {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n    \n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache);\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n        allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n          fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n          owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n        }\n    }\n    \n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('allPairs(uint)'), [pairIndex])\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DXS', 'DXswap'))\n    }\n    \n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = await this.fetchSwapFees(tokenPairsToFetch, provider);\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n  \n  static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId)),\n  ) : Promise<{\n    feeDenominator: BigintIsh,\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(\n      FACTORY_ADDRESS[chainId],\n      IDXswapFactory.abi,\n      provider\n    );\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport IDXswapPair from 'dxswap-core/build/contracts/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/contracts/IDXswapFactory.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { ChainId } from '../constants'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[tokenA.chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IDXswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDXswapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(await new Contract(\n      FACTORY_ADDRESS[tokenAmountA.token.chainId],\n      IDXswapFactory.abi,\n      provider\n    ).protocolFeeDenominator())\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    this.swapFee = swapFee ? swapFee : defaultSwapFee\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(\n      inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.swapFee, this.protocolFeeDenominator)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw), JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.swapFee, this.protocolFeeDenominator)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IDXswapPair from 'dxswap-core/build/contracts/IDXswapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IDXswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","kovanProxies","address","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_30","_100","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","name","ETHER","Token","chainId","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","DXD","TEST_TOKENS","WEENUS","XEENUS","YEENUS","Fees","fetchSwapFee","tokenPair","provider","getDefaultProvider","getNetwork","Contract","IDXswapPair","abi","swapFee","IDXswapFactory","feeToSetter","fee","owner","fetchSwapFees","tokenPairs","multicall","MULTICALL_ABI","factoryContract","tokenPairContract","calls","callData","encodeFunctionData","getFunction","tokenPairsIndex","aggregate","map","call","result","decodeFunctionResult","returnData","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","Object","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","tokenPairAddress","swapFeesFetched","tokenPairsToFetchIndex","fetchProtocolFee","protocolFeeDenominator","feeDenominator","feeTo","feeReceiver","CAN_SET_PROTOTYPE","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","fetchData","getReserves","reserves0","reserves1","balances","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","parsedDecimals","ERC20","then","fetchPairData"],"mappings":"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"}