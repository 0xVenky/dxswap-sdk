{"version":3,"file":"dxswap-sdk.esm.js","sources":["../src/constants.ts","../src/utils.ts","../src/entities/token.ts","../src/fees.ts","../src/errors.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport { proxies as kovanProxies } from 'dxswap-core/.openzeppelin/kovan.json'\nimport MULTICALL_ABI from './abis/Multicall.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000000001',\n  [ChainId.ROPSTEN]: '0x0000000000000000000000000000000000000003',\n  [ChainId.RINKEBY]: '0x0000000000000000000000000000000000000004',\n  [ChainId.GÖRLI]: '0x0000000000000000000000000000000000000005',\n  [ChainId.KOVAN]: kovanProxies['dxswap-core/DXswapFactory'][0].address\n}\n\nexport const INIT_CODE_HASH = '0x25dd05d38222d917e4487e1da5be545f4c08adc197eb59f87c597a13cf7791d2'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _30\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst MULTICALL_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xeefBa1e63905eF1D7ACbA5a8513c70307C1cE441',\n  [ChainId.ROPSTEN]: '0x53C43764255c17BD724F74c4eF150724AC50a3ed',\n  [ChainId.KOVAN]: '0x2cc8688C5f75E365aaEEb4ea8D6a480405A48D2A',\n  [ChainId.RINKEBY]: '0x42Ad527de7d4e9d9d011aC45B31D8551f8Fe9821',\n  [ChainId.GÖRLI]: '0x77dCa2C955b15e9dE4dbBCf1246B4B85b651e50e'\n}\n\nexport { MULTICALL_ABI, MULTICALL_ADDRESS }\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId, SolidityType } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\n\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\nexport class Token {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.decimals = decimals\n    if (typeof symbol === 'string') this.symbol = symbol\n    if (typeof name === 'string') this.name = name\n  }\n\n  equals(other: Token): boolean {\n    const equal = this.chainId === other.chainId && this.address === other.address\n    if (equal) {\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equal\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const DXD = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xa1d65E8fB6e87b60FECCBc582F7f97804B725521',\n    18,\n    'DXD',\n    'DXDao'\n  ),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xDd25BaE0659fC06a8d00CD06C7f5A98D71bfB715', 18, 'DXD', 'DXDao')\n}\n\nexport const TEST_TOKENS = {\n  WEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x2823589Ae095D99bD64dEeA80B4690313e2fB519', 18, 'WEENUS', 'Weenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xaFF4481D10270F50f203E0763e2597776068CBc5', 18, 'WEENUS', 'Weenus')\n  },\n  XEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xeEf5E2d8255E973d587217f9509B416b41CA5870', 18, 'XEENUS', 'Xeenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x022E292b44B5a146F2e8ee36Ff44D3dd863C915c', 18, 'XEENUS', 'Xeenus')\n  },\n  YEENUS : {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x187E63F9eBA692A0ac98d3edE6fEb870AF0079e1', 8, 'YEENUS', 'Yeenus'),\n    [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xc6fDe3FD2Cc2b173aEC24cc3f267cb3Cd78a26B7', 8, 'YEENUS', 'Yeenus')\n  },\n}\n  \n","import JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport IDXswapPair from 'dxswap-core/build/contracts/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/contracts/IDXswapFactory.json'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  MULTICALL_ADDRESS,\n  MULTICALL_ABI,\n  ChainId\n} from './constants'\nimport { Token } from './entities/token'\n\nexport class Fees {\n\n  static async fetchSwapFee(\n    tokenPair: Token,\n    provider = getDefaultProvider(getNetwork(tokenPair.chainId)),\n  ) : Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(tokenPair.address, IDXswapPair.abi, provider).swapFee()),\n      owner: await new Contract(\n        FACTORY_ADDRESS[tokenPair.chainId],\n        IDXswapFactory.abi,\n        provider\n      ).feeToSetter()\n    }\n  }\n  \n  static async fetchSwapFees(\n    tokenPairs: Token[],\n    provider = getDefaultProvider(getNetwork(tokenPairs[0].chainId)),\n  ) : Promise<{\n    fee: BigintIsh\n    owner: string\n  }[]> {\n    const multicall = new Contract(MULTICALL_ADDRESS[tokenPairs[0].chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[tokenPairs[0].chainId], IDXswapFactory.abi, provider);\n    const tokenPairContract = new Contract(tokenPairs[0].address, IDXswapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < tokenPairs.length; tokenPairsIndex++) {\n      calls.push({\n        address: tokenPairs[tokenPairsIndex].address,\n        callData: tokenPairContract.interface.encodeFunctionData(tokenPairContract.interface.getFunction('swapFee()'))\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0];\n    let fees = [];\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(tokenPairContract.interface.decodeFunctionResult(\n          tokenPairContract.interface.getFunction('swapFee()'),\n          result.returnData[resultIndex]\n        )[0]),\n        owner\n      })\n    }\n    return fees\n  }\n  \n  static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string] : {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ) : Promise<{\n    [key: string] : {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(MULTICALL_ADDRESS[chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDXswapFactory.abi, provider);\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string] : {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n    \n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache);\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n        allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n          fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n          owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n        }\n    }\n    \n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('allPairs(uint)'), [pairIndex])\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DXS', 'DXswap'))\n    }\n    \n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = await this.fetchSwapFees(tokenPairsToFetch, provider);\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n  \n  static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId)),\n  ) : Promise<{\n    feeDenominator: BigintIsh,\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(\n      FACTORY_ADDRESS[chainId],\n      IDXswapFactory.abi,\n      provider\n    );\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\n    this.token = token\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.token.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport IDXswapPair from 'dxswap-core/build/contracts/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/contracts/IDXswapFactory.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\n\nlet CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n\n\n  static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    if (CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      CACHE = {\n        ...CACHE,\n        [tokens[0].address]: {\n          ...CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[tokenA.chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IDXswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDXswapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(await new Contract(\n      FACTORY_ADDRESS[tokenAmountA.token.chainId],\n      IDXswapFactory.abi,\n      provider\n    ).protocolFeeDenominator())\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    this.swapFee = swapFee ? swapFee : defaultSwapFee\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  reserveOf(token: Token): TokenAmount {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(inputAmount.token.equals(this.token0) || inputAmount.token.equals(this.token1), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(\n      inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.swapFee, this.protocolFeeDenominator)]\n  }\n\n  getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(outputAmount.token.equals(this.token0) || outputAmount.token.equals(this.token1), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw), JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.swapFee, this.protocolFeeDenominator)]\n  }\n\n  getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast as any)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Token } from '../token'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { TokenAmount } from './tokenAmount'\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token // input i.e. denominator\n  public readonly quoteToken: Token // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseToken: Token, quoteToken: Token, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseToken = baseToken\n    this.quoteToken = quoteToken\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseToken.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteToken.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteToken, this.baseToken, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(this.quoteToken.equals(other.baseToken), 'BASE')\n    const fraction = super.multiply(other)\n    return new Price(this.baseToken, other.quoteToken, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(tokenAmount: TokenAmount): TokenAmount {\n    invariant(tokenAmount.token.equals(this.baseToken), 'TOKEN')\n    return new TokenAmount(this.quoteToken, super.multiply(tokenAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Token) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.map(pair => pair.token0.chainId === pairs[0].token0.chainId).every(x => x),\n      'CHAIN_IDS'\n    )\n    const path = [input]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n    invariant(path.length === new Set(path).size, 'PATH')\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n  }\n\n  get input(): Token {\n    return this.path[0]\n  }\n\n  get output(): Token {\n    return this.path[this.path.length - 1]\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Token } from 'entities/token'\nimport invariant from 'tiny-invariant'\n\nimport { ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Fraction, TokenAmount } from './fractions'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\nfunction getSlippage(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: TokenAmount\n  readonly outputAmount: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.token.equals(b.inputAmount.token), 'INPUT_TOKEN')\n  invariant(a.outputAmount.token.equals(b.outputAmount.token), 'OUTPUT_TOKEN')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.slippage.lessThan(b.slippage)) {\n    return -1\n  } else if (a.slippage.greaterThan(b.slippage)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\nexport class Trade {\n  public readonly route: Route\n  public readonly tradeType: TradeType\n  public readonly inputAmount: TokenAmount\n  public readonly outputAmount: TokenAmount\n  public readonly executionPrice: Price\n  public readonly nextMidPrice: Price\n  public readonly slippage: Percent\n\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\n    invariant(amount.token.equals(tradeType === TradeType.EXACT_INPUT ? route.input : route.output), 'TOKEN')\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      amounts[0] = amount\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      amounts[amounts.length - 1] = amount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    const inputAmount = amounts[0]\n    const outputAmount = amounts[amounts.length - 1]\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.executionPrice = new Price(route.input, route.output, inputAmount.raw, outputAmount.raw)\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.slippage = getSlippage(route.midPrice, inputAmount, outputAmount)\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      return new TokenAmount(\n        this.outputAmount.token,\n        new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.raw).quotient\n      )\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      return new TokenAmount(\n        this.inputAmount.token,\n        new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      )\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    amountIn: TokenAmount,\n    tokenOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: TokenAmount = amountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === amountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut!.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.token),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut!,\n          tokenOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    tokenIn: Token,\n    amountOut: TokenAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: TokenAmount = amountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === amountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn!.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(new Route([pair, ...currentPairs], tokenIn), originalAmountOut, TradeType.EXACT_OUTPUT),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          tokenIn,\n          amountIn!,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","kovanProxies","address","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_30","_100","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CACHE","Token","chainId","decimals","symbol","name","fetchData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","equals","other","equal","sortsBefore","toLowerCase","WETH","DXD","TEST_TOKENS","WEENUS","XEENUS","YEENUS","Fees","fetchSwapFee","tokenPair","IDXswapPair","abi","swapFee","IDXswapFactory","feeToSetter","fee","owner","fetchSwapFees","tokenPairs","multicall","MULTICALL_ABI","factoryContract","tokenPairContract","calls","callData","encodeFunctionData","getFunction","tokenPairsIndex","aggregate","map","call","result","decodeFunctionResult","returnData","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","Object","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","tokenPairAddress","swapFeesFetched","tokenPairsToFetchIndex","fetchProtocolFee","protocolFeeDenominator","feeDenominator","feeTo","feeReceiver","CAN_SET_PROTOTYPE","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","TokenAmount","token","amount","parsedAmount","exponentiate","raw","toExact","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","getReserves","reserves0","reserves1","balances","reserveOf","token0","token1","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","baseToken","quoteToken","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","slice","reduce","accumulator","currentValue","fraction","quote","tokenAmount","adjusted","Route","input","every","currentInput","output","Set","size","midPrice","_100_PERCENT","Percent","getSlippage","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","Trade","tradeType","EXACT_INPUT","amounts","Array","nextPairs","nextPair","executionPrice","nextMidPrice","minimumAmountOut","slippageTolerance","EXACT_OUTPUT","maximumAmountIn","bestTradeExactIn","amountIn","tokenOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","amountOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","tokenIn","originalAmountOut","isInsufficientReservesError"],"mappings":"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"}