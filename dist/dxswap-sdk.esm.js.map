{"version":3,"file":"dxswap-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/entities/fractions/percent.ts","../src/entities/trade.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport { proxies as kovanProxies } from 'dxswap-core/.openzeppelin/kovan.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000000001',\n  [ChainId.ROPSTEN]: '0x0000000000000000000000000000000000000003',\n  [ChainId.RINKEBY]: '0x0000000000000000000000000000000000000004',\n  [ChainId.GÖRLI]: '0x0000000000000000000000000000000000000005',\n  [ChainId.KOVAN]: kovanProxies['dxswap-core/DXswapFactory'][0].address\n}\n\nexport const INIT_CODE_HASH = '0x25dd05d38222d917e4487e1da5be545f4c08adc197eb59f87c597a13cf7791d2'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId, SolidityType } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\n\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\nexport class Token {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.decimals = decimals\n    if (typeof symbol === 'string') this.symbol = symbol\n    if (typeof name === 'string') this.name = name\n  }\n\n  equals(other: Token): boolean {\n    const equal = this.chainId === other.chainId && this.address === other.address\n    if (equal) {\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equal\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\n    this.token = token\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.token.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _30,\n  _10000\n} from '../constants'\nimport IDXswapPair from 'dxswap-core/build/contracts/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/contracts/IDXswapFactory.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\n\nlet CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: Promise<BigintIsh>\n  public readonly protocolFeeDenominator: Promise<BigintIsh>\n\n\n  static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    if (CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      CACHE = {\n        ...CACHE,\n        [tokens[0].address]: {\n          ...CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[tokenA.chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IDXswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n  constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    this.swapFee = new Contract(\n      this.liquidityToken.address, IDXswapPair.abi, getDefaultProvider(getNetwork(tokenAmountA.token.chainId))\n    ).swapFee().catch(() => { return _30 })\n    this.protocolFeeDenominator = new Contract(\n      FACTORY_ADDRESS[tokenAmountA.token.chainId],\n      IDXswapFactory.abi,\n      getDefaultProvider(getNetwork(tokenAmountA.token.chainId))\n    ).protocolFeeDenominator().catch(() => { return FIVE })\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  reserveOf(token: Token): TokenAmount {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  async getOutputAmount(inputAmount: TokenAmount): Promise<[TokenAmount, Pair]> {\n    invariant(inputAmount.token.equals(this.token0) || inputAmount.token.equals(this.token1), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(await this.swapFee)))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  async getInputAmount(outputAmount: TokenAmount): Promise<[TokenAmount, Pair]> {\n    invariant(outputAmount.token.equals(this.token0) || outputAmount.token.equals(this.token1), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw), JSBI.subtract(_10000, parseBigintIsh(await this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  async getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): Promise<TokenAmount> {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast as any)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(await this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Token } from '../token'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { TokenAmount } from './tokenAmount'\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token // input i.e. denominator\n  public readonly quoteToken: Token // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseToken: Token, quoteToken: Token, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseToken = baseToken\n    this.quoteToken = quoteToken\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseToken.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteToken.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteToken, this.baseToken, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(this.quoteToken.equals(other.baseToken), 'BASE')\n    const fraction = super.multiply(other)\n    return new Price(this.baseToken, other.quoteToken, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(tokenAmount: TokenAmount): TokenAmount {\n    invariant(tokenAmount.token.equals(this.baseToken), 'TOKEN')\n    return new TokenAmount(this.quoteToken, super.multiply(tokenAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Token) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.map(pair => pair.token0.chainId === pairs[0].token0.chainId).every(x => x),\n      'CHAIN_IDS'\n    )\n    const path = [input]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n    invariant(path.length === new Set(path).size, 'PATH')\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n  }\n\n  get input(): Token {\n    return this.path[0]\n  }\n\n  get output(): Token {\n    return this.path[this.path.length - 1]\n  }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Token } from 'entities/token'\nimport invariant from 'tiny-invariant'\n\nimport { ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Fraction, TokenAmount } from './fractions'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\nfunction getSlippage(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount?: TokenAmount\n  readonly outputAmount?: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount !== undefined && a.outputAmount !== undefined, 'UNDEFINED_A')\n  invariant(b.inputAmount !== undefined && b.outputAmount !== undefined, 'UNDEFINED_B')\n  \n  invariant(a.inputAmount.token.equals(b.inputAmount.token), 'INPUT_TOKEN')\n  invariant(a.outputAmount.token.equals(b.outputAmount.token), 'OUTPUT_TOKEN')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  invariant(a.slippage !== undefined && b.slippage !== undefined, 'UNDEFINED_NULL')\n  invariant(a.route !== undefined && b.route !== undefined, 'UNDEFINED_NULL')\n\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.slippage.lessThan(b.slippage)) {\n    return -1\n  } else if (a.slippage.greaterThan(b.slippage)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\nexport class Trade {\n  public route?: Route\n  public tradeType?: TradeType\n  public amount?: TokenAmount\n  public inputAmount?: TokenAmount\n  public outputAmount?: TokenAmount\n  public executionPrice?: Price\n  public nextMidPrice?: Price\n  public slippage?: Percent\n  \n  public create = async (route: Route, amount: TokenAmount, tradeType: TradeType) => {\n    invariant(amount.token.equals(tradeType === TradeType.EXACT_INPUT ? route.input : route.output), 'TOKEN')\n    let trade = new Trade()\n    trade.route = route\n    trade.tradeType = tradeType\n    trade.amount = amount\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      amounts[0] = trade.amount\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = await pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      amounts[amounts.length - 1] = trade.amount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = await pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    trade.route = route\n    trade.tradeType = tradeType\n    const inputAmount = amounts[0]\n    const outputAmount = amounts[amounts.length - 1]\n    trade.inputAmount = inputAmount\n    trade.outputAmount = outputAmount\n    trade.executionPrice = new Price(route.input, route.output, inputAmount.raw, outputAmount.raw)\n    trade.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    trade.slippage = getSlippage(route.midPrice, inputAmount, outputAmount)\n    \n    return trade;\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount | undefined {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    invariant(this.outputAmount !== undefined)\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      return new TokenAmount(\n        this.outputAmount.token,\n        new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.raw).quotient\n      )\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount | undefined {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    invariant(this.inputAmount !== undefined)\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      return new TokenAmount(\n        this.inputAmount.token,\n        new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      )\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static async bestTradeExactIn(\n    pairs: Pair[],\n    amountIn: TokenAmount,\n    tokenOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: TokenAmount = amountIn,\n    bestTrades: Trade[] = []\n  ): Promise<Trade[]> {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === amountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = await pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut!.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          await new Trade().create(\n            new Route([...currentPairs, pair], originalAmountIn.token),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut!,\n          tokenOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static async bestTradeExactOut(\n    pairs: Pair[],\n    tokenIn: Token,\n    amountOut: TokenAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: TokenAmount = amountOut,\n    bestTrades: Trade[] = []\n  ): Promise<Trade[]> {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === amountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = await pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn!.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          await new Trade().create(\n            new Route([pair, ...currentPairs], tokenIn),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          tokenIn,\n          amountIn!,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","kovanProxies","address","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_30","_100","_10000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CACHE","Token","chainId","decimals","symbol","fetchData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","equals","other","equal","sortsBefore","toLowerCase","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","TokenAmount","token","amount","parsedAmount","exponentiate","raw","toExact","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","swapFee","IDXswapPair","abi","protocolFeeDenominator","IDXswapFactory","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","getReserves","reserves0","reserves1","balances","reserveOf","token0","token1","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","baseToken","quoteToken","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","slice","reduce","accumulator","currentValue","fraction","quote","tokenAmount","adjusted","Route","input","map","every","currentInput","output","Set","size","midPrice","_100_PERCENT","Percent","getSlippage","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","Trade","tradeType","trade","amounts","executionPrice","nextMidPrice","nextPairs","EXACT_INPUT","Array","nextPair","minimumAmountOut","slippageTolerance","EXACT_OUTPUT","maximumAmountIn","bestTradeExactIn","amountIn","tokenOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","amountOut","create","pairsExcludingThisPair","concat","isInsufficientInputAmountError","bestTradeExactOut","tokenIn","originalAmountOut","isInsufficientReservesError"],"mappings":"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"}